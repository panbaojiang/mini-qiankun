name: Build and Deploy # 构建流水线名字
on: # 触发条件
  push: # 当有代码推送到仓库时触发
    branches:
      - master # 指定触发分支
  pull_request: # 当有PR时也触发
    branches: # 指定触发分支
      - master # 指定触发分支

env: # 环境变量
  DOCKER_IMAGE_NAME: qiankun-app
  DOCKER_REGISTRY: docker.io

jobs: # 定义任务
  test: # 测试任务
    runs-on: ubuntu-latest # 运行环境
    steps:
      - name: Checkout # 检出代码
        uses: actions/checkout@v4 # 使用官方检出代码的action

      - name: Setup pnpm # 设置pnpm
        uses: pnpm/action-setup@v4 # 使用官方设置pnpm的action
        with:
          version: 10.13.1 # 设置pnpm版本

      - name: Setup Node.js # 设置Node.js环境
        uses: actions/setup-node@v4 # 使用官方设置Node.js环境的action
        with:
          node-version: 20 # 设置Node.js版本
          cache: "pnpm" # 设置缓存

      - name: Install dependencies # 安装依赖
        run: pnpm install --frozen-lockfile # 使用 pnpm 安装依赖，锁定版本

      - name: Run tests # 运行测试
        run: |
          echo "Running tests..." # 运行测试
          # 这里可以添加实际的测试命令
          # pnpm test || echo "No tests configured"

      - name: Run linting # 代码检查
        run: |
          echo "Running linting..."
          # 这里可以添加实际的lint命令
          # pnpm lint || echo "No linting configured"

  build: # 构建任务
    runs-on: ubuntu-latest # 运行环境
    needs: test # 依赖测试任务
    strategy:
      matrix:
        node-version: [18, 20] # 支持多个Node.js版本

    steps: # 定义步骤
      - name: Checkout # 检出代码
        uses: actions/checkout@v4 # 使用官方检出代码的action
        with: # 配置
          fetch-depth: 0 # 检出所有历史记录 可以删除次配置

      - name: Setup pnpm # 设置pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.13.1 # 设置pnpm版本

      - name: Setup Node.js # 设置Node.js环境
        uses: actions/setup-node@v4 # 使用官方设置Node.js环境的action
        with:
          node-version: ${{ matrix.node-version }} # 设置Node.js版本
          cache: "pnpm" # 设置缓存

      - name: Get pnpm store directory # 获取pnpm存储目录
        shell: bash # 使用bash shell
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV # 设置pnpm存储目录

      - name: Setup pnpm cache # 设置pnpm缓存
        uses: actions/cache@v4 # 使用官方设置pnpm缓存的action
        with:
          path: ${{ env.STORE_PATH }} # 设置pnpm存储目录
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }} # 设置pnpm缓存key
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies # 安装依赖
        run: pnpm install --frozen-lockfile # 使用 pnpm 安装依赖，锁定版本

      - name: Build packages # 构建packages
        run: pnpm run build:packages

      - name: Build main app # 构建主应用
        run: |
          cd apps/main-app # 进入主应用目录
          pnpm build # 构建主应用

      - name: Build sub apps # 构建子应 用
        run: |
          cd apps/sub-react # 进入React子应用目录
          pnpm build # 构建React子应用
          cd ../sub-vue2 # 进入Vue2子应用目录
          pnpm build # 构建Vue2子应用
          cd ../sub-vue3 # 进入Vue3子应用目录
          pnpm build # 构建Vue3子应用

      - name: Verify build outputs # 验证构建输出
        run: |
          echo "Checking build outputs..." # 验证构建输出
          ls -la apps/main-app/dist/ # 列出主应用构建产物
          ls -la apps/sub-react/dist/ # 列出React子应用构建产物
          ls -la apps/sub-vue2/dist/ # 列出Vue2子应用构建产物
          ls -la apps/sub-vue3/dist/ # 列出Vue3子应用构建产物

      - name: Upload build artifacts # 上传构建产物
        uses: actions/upload-artifact@v4 # 使用官方上传构建产物的action
        with:
          name: build-artifacts # 上传构建产物
          path: |
            apps/main-app/dist/ # 主应用构建产物 
            apps/sub-react/dist/ # React子应用构建产物
            apps/sub-vue2/dist/ # Vue2子应用构建产物
            apps/sub-vue3/dist/ # Vue3子应用构建产物
          retention-days: 7 # 保留7天

      - name: Deploy to GitHub Pages # 部署到GitHub Pages
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' # 只在master/main分支部署
        uses: peaceiris/actions-gh-pages@v3 # 使用 actions-gh-pages 部署
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }} # 使用 GITHUB_TOKEN 作为缓存凭证
          publish_dir: apps/main-app/dist # 要进行部署的目录
          cname: qiankun-dom.com # 自定义域名
          user_name: ${{ secrets.GITHUB_USER }} # 使用 GITHUB_USER 作为缓存凭证
          user_email: ${{ secrets.GITHUB_EMAIL }} # 使用 GITHUB_EMAIL 作为缓存凭证
          force_orphan: true # 强制创建孤立分支
          commit_message: "Deploy to GitHub Pages [skip ci]" # 提交信息

  docker-deploy: # Docker部署任务
    runs-on: ubuntu-latest # 运行环境
    needs: build # 依赖构建任务
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' # 只在master/main分支部署
    environment: production # 生产环境
    steps:
      - name: Checkout code # 检出代码
        uses: actions/checkout@v4

      - name: Setup Docker Buildx # 设置Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image # 构建Docker镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy/docker/Dockerfile
          push: false
          tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to server # 部署到服务器
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            # 创建部署目录
            mkdir -p ~/qiankun-deploy

            # 进入部署目录
            cd ~/qiankun-deploy

            # 停止并删除旧容器
            docker stop qiankun-app || true
            docker rm qiankun-app || true

            # 删除旧镜像
            docker rmi qiankun-app || true

            # 拉取最新代码
            if [ -d "mini-qiankun" ]; then
              cd mini-qiankun
              git pull origin master
            else
              git clone https://github.com/${{ github.repository }}.git mini-qiankun
              cd mini-qiankun
            fi

            # 构建新镜像
            docker build -t qiankun-app -f deploy/docker/Dockerfile .

            # 运行新容器
            docker run -d \
              --name qiankun-app \
              --restart unless-stopped \
              -p 80:80 \
              -v ~/qiankun-deploy/logs:/var/log/nginx \
              qiankun-app

            # 等待应用启动
            sleep 10

            # 健康检查
            if curl -f http://localhost/health > /dev/null 2>&1; then
              echo "Docker deployment successful!"
              docker ps --filter "name=qiankun-app"
            else
              echo "Docker deployment failed - health check failed"
              docker logs qiankun-app
              exit 1
            fi

  deploy-status: # 部署状态检查任务
    runs-on: ubuntu-latest # 运行环境
    needs: [build, docker-deploy] # 依赖构建任务和Docker部署任务
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' # 只在master/main分支部署
    steps:
      - name: Check deployment status # 检查部署状态
        run: |
          echo "All deployments completed successfully!" # 所有部署成功
          echo "GitHub Pages: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" # GitHub Pages
          echo "Docker App: http://${{ secrets.SERVER_HOST }}" # Docker应用地址
          echo "Health Check: http://${{ secrets.SERVER_HOST }}/health" # 健康检查地址
